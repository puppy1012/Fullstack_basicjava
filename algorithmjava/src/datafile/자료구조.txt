1. int[] (배열)
int[]는 자바에서 제공하는 가장 기본적인 자료구조로, 고정된 크기의 정수 배열이다.
한 번 크기를 정하면 바꿀 수 없고, 각 요소는 인덱스를 통해 직접 접근한다.

특징: 빠른 접근 속도(O(1)), 크기 고정, 선언 시 크기 필수

주요 메서드: 메서드는 없고, arr[i] 형식으로 직접 접근

사용 예시: 숫자 목록, 고정 크기의 테이블, DP 배열 등
int[] arr = new int[5]; // 크기 5인 배열 (기본값 0)
int[] arr2 = {10, 20, 30}; // 초기값 지정
for (int i = 0; i < arr2.length; i++) {
    System.out.println(arr2[i]);
}

	or
	
for (int n : arr2) {
    System.out.println(n);
}

2. ArrayList
ArrayList는 배열처럼 인덱스를 사용해서 값을 다룰 수 있으면서도, 크기가 자동으로 늘어나는 리스트형 자료구조다.
내부적으로 배열을 사용하지만, 배열보다 훨씬 더 유연하게 작동한다.

특징: 크기가 자동으로 증가, 삽입/삭제/탐색이 편리함, 인덱스 접근 가능

주요 메서드: add(), get(), set(), remove(), size()

사용 예시: 동적으로 늘어나는 데이터 저장, 리스트 기반 알고리즘, 정렬 가능한 집합 등
import java.util.ArrayList;

ArrayList<Integer> list = new ArrayList<>();
for (int i = 0; i < list.size(); i++) {
    System.out.println(list.get(i));
}

3. Stack
Stack은 후입선출(LIFO, Last In First Out) 방식의 자료구조다.
마지막에 넣은 데이터가 가장 먼저 꺼내진다. 재귀, 되돌리기(undo) 기능 등에 자주 쓰인다.

특징: 끝에 값을 넣고, 끝에서 꺼낸다. 순서가 반대인 작업에 유리

주요 메서드: push() (삽입), pop() (제거), peek() (맨 위 확인), isEmpty()

사용 예시: 괄호 검사, DFS, 브라우저 히스토리, 되돌리기 기능
import java.util.Stack;

Stack<Integer> stack = new Stack<>();
while (!stack.isEmpty()) {
    System.out.println(stack.pop());
}

4. Queue
Queue는 선입선출(FIFO, First In First Out) 방식의 자료구조다.
먼저 넣은 값이 먼저 나간다. 줄 서기나 순서대로 처리할 때 유용하다.

특징: 앞(front)에서 꺼내고, 뒤(rear)로 넣는다. 처리 순서를 보장

주요 메서드: add() (삽입), poll() (제거), peek() (맨 앞 확인), isEmpty()

사용 예시: BFS, 프로세스 스케줄링, 이벤트 처리, 캐시
import java.util.Queue;
import java.util.LinkedList;

Queue<Integer> queue = new LinkedList<>();
while (!queue.isEmpty()) {
    System.out.println(queue.poll());
}

마무리 요약 (한 문장씩 핵심정리)
int[]는 고정된 크기의 배열로 빠르지만 유연하지 않다.

ArrayList는 배열처럼 다루면서 크기가 유동적으로 변해 매우 편리하다.

Stack은 가장 나중에 넣은 것을 가장 먼저 꺼내는 구조로, 되돌리기나 재귀에 쓰인다.

Queue는 먼저 들어간 것이 먼저 나오는 구조로, 순서대로 처리할 때 필요하다.

